// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  image                String
  email                String?               @unique
  verifyEmail          Boolean               @default(false)
  emailVerified        DateTime?
  number               String?
  password             String?
  address              String?
  provider             String                @default("credentials")
  accounts             Account[]
  sessions             Session[]
  Authenticator        Authenticator[]
  role                 Role                  @default(User)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  UserVerificationCode UserVerificationCode?
  Request              Request[]
  Order                Order[]
}

model UserVerificationCode {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  verificationCode String   @default("")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [email], references: [email], onDelete: Cascade)
  email            String   @unique
}

enum Role {
  User
  Admin
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Farmanimal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  animal    String
  age       String
  breed     String
  gender    String
  amount    Int
  message   String
  available Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  animal    String
  age       String
  breed     String
  gender    String
  quantity  Int
  amount    Int
  message   String
  delete    DeleteRequest @default(None)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.ObjectId
}

enum DeleteRequest {
  None
  Pending
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  animal    String
  age       String
  breed     String
  gender    String
  amount    Int
  status    OrderStatus @default(Payment_Done)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.ObjectId
}

enum OrderStatus {
  Payment_Done
  Product_Received
  Payment_Refunded
}

model Subscribe {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
